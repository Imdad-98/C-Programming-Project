#include <stdio.h>
#include <string.h>

#define MAX_ROUTINES 100
#define MAX_LEN 50

typedef struct {
    char date[MAX_LEN];
    char weather[MAX_LEN];
    char timeSlot[MAX_LEN]; // pre-meal, post-meal, pre-performance
    char workoutType[MAX_LEN];
    int duration; // in minutes
    int calories;
} WorkoutRoutine;

WorkoutRoutine routines[MAX_ROUTINES];
int routineCount = 0;

void setMyWorkoutRoutine() {
    printf("Enter number of workout records to input: ");
    scanf("%d", &routineCount);
    getchar(); // Clear newline

    for (int i = 0; i < routineCount; i++) {
        printf("\nWorkout %d:\n", i + 1);
        printf("Date (YYYY-MM-DD): ");
        fgets(routines[i].date, MAX_LEN, stdin);
        routines[i].date[strcspn(routines[i].date, "\n")] = 0;

        printf("Weather: ");
        fgets(routines[i].weather, MAX_LEN, stdin);
        routines[i].weather[strcspn(routines[i].weather, "\n")] = 0;

        printf("Time slot (pre-meal, post-meal, pre-performance): ");
        fgets(routines[i].timeSlot, MAX_LEN, stdin);
        routines[i].timeSlot[strcspn(routines[i].timeSlot, "\n")] = 0;

        printf("Workout type: ");
        fgets(routines[i].workoutType, MAX_LEN, stdin);
        routines[i].workoutType[strcspn(routines[i].workoutType, "\n")] = 0;

        printf("Duration (minutes): ");
        scanf("%d", &routines[i].duration);

        printf("Calories burned: ");
        scanf("%d", &routines[i].calories);
        getchar(); // Clear newline
    }

    printf("\n=== All Workout Routines ===\n");
    for (int i = 0; i < routineCount; i++) {
        printf("%d. Date: %s | Weather: %s | Time Slot: %s | Type: %s | Duration: %d min | Calories: %d kcal\n",
               i + 1, routines[i].date, routines[i].weather, routines[i].timeSlot,
               routines[i].workoutType, routines[i].duration, routines[i].calories);
    }
}

void statsMyWorkoutRoutine() {
    char dateQuery[MAX_LEN], timeSlotQuery[MAX_LEN], specificWorkout[MAX_LEN];
    int workoutFreq[MAX_ROUTINES] = {0};
    char workoutTypes[MAX_ROUTINES][MAX_LEN];
    int typeCount = 0;

    printf("\nEnter date to analyze (YYYY-MM-DD): ");
    fgets(dateQuery, MAX_LEN, stdin);
    dateQuery[strcspn(dateQuery, "\n")] = 0;

    printf("Enter time slot to analyze: ");
    fgets(timeSlotQuery, MAX_LEN, stdin);
    timeSlotQuery[strcspn(timeSlotQuery, "\n")] = 0;

    printf("\nWorkouts on %s during %s:\n", dateQuery, timeSlotQuery);
    for (int i = 0; i < routineCount; i++) {
        if (strcmp(routines[i].date, dateQuery) == 0 &&
            strcmp(routines[i].timeSlot, timeSlotQuery) == 0) {
            printf("- %s (%d min)\n", routines[i].workoutType, routines[i].duration);
        }
    }

    // Total calories per day
    printf("\nCalories burned per day:\n");
    for (int i = 0; i < routineCount; i++) {
        int total = 0;
        for (int j = 0; j < routineCount; j++) {
            if (strcmp(routines[i].date, routines[j].date) == 0) {
                total += routines[j].calories;
            }
        }
        printf("%s: %d kcal\n", routines[i].date, total);
    }

    // Most frequent workout type
    for (int i = 0; i < routineCount; i++) {
        int found = 0;
        for (int j = 0; j < typeCount; j++) {
            if (strcmp(workoutTypes[j], routines[i].workoutType) == 0) {
                workoutFreq[j]++;
                found = 1;
                break;
            }
        }
        if (!found) {
            strcpy(workoutTypes[typeCount], routines[i].workoutType);
            workoutFreq[typeCount++] = 1;
        }
    }

    int maxIdx = 0;
    for (int i = 1; i < typeCount; i++) {
        if (workoutFreq[i] > workoutFreq[maxIdx])
            maxIdx = i;
    }
    printf("\nMost frequent workout: %s (%d times)\n", workoutTypes[maxIdx], workoutFreq[maxIdx]);

    // Longest workout day
    int maxDuration = 0;
    char longestDay[MAX_LEN] = "";
    for (int i = 0; i < routineCount; i++) {
        int sumDuration = 0;
        for (int j = 0; j < routineCount; j++) {
            if (strcmp(routines[i].date, routines[j].date) == 0)
                sumDuration += routines[j].duration;
        }
        if (sumDuration > maxDuration) {
            maxDuration = sumDuration;
            strcpy(longestDay, routines[i].date);
        }
    }
    printf("Longest workout day: %s (%d min)\n", longestDay, maxDuration);

    // Most frequent specific workout's frequent day
    strcpy(specificWorkout, workoutTypes[maxIdx]);
    int maxCount = 0;
    char mostCommonDay[MAX_LEN] = "";
    for (int i = 0; i < routineCount; i++) {
        if (strcmp(routines[i].workoutType, specificWorkout) == 0) {
            int count = 0;
            for (int j = 0; j < routineCount; j++) {
                if (strcmp(routines[i].date, routines[j].date) == 0 &&
                    strcmp(routines[j].workoutType, specificWorkout) == 0)
                    count++;
            }
            if (count > maxCount) {
                maxCount = count;
                strcpy(mostCommonDay, routines[i].date);
            }
        }
    }
    printf("Most %s performed on: %s (%d times)\n", specificWorkout, mostCommonDay, maxCount);

    // Bonus: Calorie-efficient time slot
    int slotCal[3] = {0}, slotCount[3] = {0};
    for (int i = 0; i < routineCount; i++) {
        if (strcmp(routines[i].timeSlot, "pre-meal") == 0) {
            slotCal[0] += routines[i].calories;
            slotCount[0]++;
        } else if (strcmp(routines[i].timeSlot, "post-meal") == 0) {
            slotCal[1] += routines[i].calories;
            slotCount[1]++;
        } else if (strcmp(routines[i].timeSlot, "pre-performance") == 0) {
            slotCal[2] += routines[i].calories;
            slotCount[2]++;
        }
    }

    float avgCal[3] = {0};
    for (int i = 0; i < 3; i++)
        if (slotCount[i] > 0)
            avgCal[i] = (float)slotCal[i] / slotCount[i];

    int bestSlot = 0;
    for (int i = 1; i < 3; i++)
        if (avgCal[i] > avgCal[bestSlot])
            bestSlot = i;

    const char *slots[] = {"pre-meal", "post-meal", "pre-performance"};
    printf("Most calorie-efficient time slot: %s (%.2f kcal avg)\n", slots[bestSlot], avgCal[bestSlot]);
}

int main() {
    int choice;
    while (1) {
        printf("\n=== Workout Routine Menu ===\n");
        printf("1. Enter Workout Routine\n");
        printf("2. Analyze Workout Routine\n");
        printf("0. Exit\n");
        printf("Select: ");
        scanf("%d", &choice);
        getchar(); // clear buffer

        if (choice == 1)
            setMyWorkoutRoutine();
        else if (choice == 2)
            statsMyWorkoutRoutine();
        else if (choice == 0)
            break;
        else
            printf("Invalid option.\n");
    }
    return 0;
}
