#include <stdio.h>
#include <string.h>

#define MAX_CANDIDATES 5
#define MAX_MESSAGES 20
#define MAX_LENGTH 100

// Immutable audition candidate information (name,audition,email)
const char memorial01_arr[MAX_CANDIDATES][MAX_LENGTH] = {
    "Alice,milliways,alice@example.com",
    "Bob,milliways,bob@example.com",
    "Charlie,milliways,charlie@example.com",
    "Daisy,milliways,daisy@example.com",
    "Evan,milliways,evan@example.com"
};

// Failed candidate indices (e.g., Alice, Bob, Charlie failed)
const int failed02_arr[3] = {0, 1, 2};

// Rolling paper messages
char rollingpp02_arr[MAX_MESSAGES][MAX_LENGTH];      // messages
char rollingpp_sender03_arr[MAX_MESSAGES][MAX_LENGTH];  // sender
char rollingpp_target04_arr[MAX_MESSAGES][MAX_LENGTH];  // target name
int rollingpp_count05 = 0;

// Extract candidate name from full string
void extract_name(char *full, char *name_out) {
    int i = 0;
    while (full[i] != ',' && full[i] != '\0') {
        name_out[i] = full[i];
        i++;
    }
    name_out[i] = '\0';
}

// Extract email from full string
void extract_email(char *full, char *email_out) {
    int i = 0, comma_count = 0, j = 0;
    while (full[i] != '\0') {
        if (full[i] == ',') {
            comma_count++;
        } else if (comma_count == 2) {
            email_out[j++] = full[i];
        }
        i++;
    }
    email_out[j] = '\0';
}

// Show failed candidates
void list_failed_candidates() {
    printf("\nFailed Candidates:\n");
    for (int i = 0; i < 3; i++) {
        char name[MAX_LENGTH];
        extract_name((char*)memorial01_arr[failed02_arr[i]], name);
        printf("%d. %s\n", i + 1, name);
    }
}

// Write rolling paper message
void write_message() {
    char sender[MAX_LENGTH], message[MAX_LENGTH], recipient[MAX_LENGTH];
    int choice;

    printf("\nEnter your name: ");
    scanf(" %[^\n]", sender);

    list_failed_candidates();
    printf("Select recipient (1-3): ");
    scanf("%d", &choice);

    if (choice < 1 || choice > 3) {
        printf("Invalid choice.\n");
        return;
    }

    extract_name((char*)memorial01_arr[failed02_arr[choice - 1]], recipient);

    printf("Enter your message: ");
    scanf(" %[^\n]", message);

    // Save the message
    snprintf(rollingpp02_arr[rollingpp_count05], MAX_LENGTH, "\"%s\": \"%s\"", sender, message);
    strcpy(rollingpp_sender03_arr[rollingpp_count05], sender);
    strcpy(rollingpp_target04_arr[rollingpp_count05], recipient);
    rollingpp_count05++;

    printf("Message saved for %s.\n", recipient);
}

// View messages for a failed candidate
void view_messages() {
    int choice;
    char recipient[MAX_LENGTH], email[MAX_LENGTH];
    int found = 0;

    list_failed_candidates();
    printf("Select a candidate to view messages (1â€“3): ");
    scanf("%d", &choice);

    if (choice < 1 || choice > 3) {
        printf("Invalid choice.\n");
        return;
    }

    int idx = failed02_arr[choice - 1];
    extract_name((char*)memorial01_arr[idx], recipient);
    extract_email((char*)memorial01_arr[idx], email);

    printf("\nMessages for %s:\n", recipient);
    for (int i = 0; i < rollingpp_count05; i++) {
        if (strcmp(rollingpp_target04_arr[i], recipient) == 0) {
            printf("%s\n", rollingpp02_arr[i]);
            found = 1;
        }
    }

    if (!found) {
        printf("No messages found.\n");
        return;
    }

    char confirm;
    printf("Do you want to send the email to %s (%s)? (y/n): ", recipient, email);
    scanf(" %c", &confirm);
    if (confirm == 'y' || confirm == 'Y') {
        printf("Email has been sent.\n");
    } else {
        printf("Email sending cancelled.\n");
    }
}

int main() {
    int option;

    while (1) {
        printf("\n==== Rolling Paper Menu ====\n");
        printf("1. Write Message to Failed Candidate\n");
        printf("2. View Messages for Candidate\n");
        printf("3. Exit\n");
        printf("Select option: ");
        scanf("%d", &option);

        if (option == 1) {
            write_message();
        } else if (option == 2) {
            view_messages();
        } else if (option == 3) {
            printf("Exiting program.\n");
            break;
        } else {
            printf("Invalid option.\n");
        }
    }

    return 0;
}
