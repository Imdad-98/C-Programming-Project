// stage8.h
#ifndef STAGE8_H
#define STAGE8_H

#define MAX_ARTISTS 100
#define MAX_LEN 100

typedef struct {
    char name[MAX_LEN];
    char nickname[MAX_LEN];
    char dob[MAX_LEN];
    char gender[MAX_LEN];
    char education[MAX_LEN];
    char phone[MAX_LEN];
    char email[MAX_LEN];
    char nationality[MAX_LEN];
    int height;
    int weight;
    char blood_type[MAX_LEN];
    char allergies[MAX_LEN];
    char sns[MAX_LEN];
} Artist;

extern Artist artists[MAX_ARTISTS];
extern int artist_count;

void protectMyData(void);
void encryptData(char *data, char key, int method);
void decryptData(char *data, char key, int method);

#endif


// stage8.c
#include <stdio.h>
#include <string.h>
#include "stage8.h"

Artist artists[MAX_ARTISTS];
int artist_count = 0;

void encryptData(char *data, char key, int method) {
    for (int i = 0; i < strlen(data); i++) {
        switch (method) {
            case 1: data[i] ^= key; break; // XOR
            case 2: data[i] |= key; break; // OR
            case 3: data[i] &= key; break; // AND
            case 4: data[i] = (data[i] << 1) | (data[i] >> 7); break; // Bit Shift
            default: break;
        }
    }
}

void decryptData(char *data, char key, int method) {
    for (int i = 0; i < strlen(data); i++) {
        switch (method) {
            case 1: data[i] ^= key; break; // XOR
            case 2: break; // OR not reversible
            case 3: break; // AND not reversible
            case 4: data[i] = (data[i] >> 1) | (data[i] << 7); break; // Reverse Bit Shift
            default: break;
        }
    }
}

void protectMyData() {
    FILE *fp;
    char key, method;
    char fileName[] = "artist_data.txt";

    printf("Select encryption method:\n1. XOR\n2. OR\n3. AND\n4. Bit Shift\n> ");
    scanf(" %c", &method);

    printf("Enter encryption key (single character): ");
    scanf(" %c", &key);

    printf("Enter number of artists: ");
    scanf("%d", &artist_count);
    getchar();

    for (int i = 0; i < artist_count; i++) {
        printf("\n--- Artist #%d ---\n", i + 1);
        printf("Name: "); fgets(artists[i].name, MAX_LEN, stdin); strtok(artists[i].name, "\n");
        printf("Nickname: "); fgets(artists[i].nickname, MAX_LEN, stdin); strtok(artists[i].nickname, "\n");
        printf("DOB: "); fgets(artists[i].dob, MAX_LEN, stdin); strtok(artists[i].dob, "\n");
        printf("Gender: "); fgets(artists[i].gender, MAX_LEN, stdin); strtok(artists[i].gender, "\n");
        printf("Education: "); fgets(artists[i].education, MAX_LEN, stdin); strtok(artists[i].education, "\n");
        printf("Phone: "); fgets(artists[i].phone, MAX_LEN, stdin); strtok(artists[i].phone, "\n");
        encryptData(artists[i].phone, key, method - '0');
        printf("Email: "); fgets(artists[i].email, MAX_LEN, stdin); strtok(artists[i].email, "\n");
        encryptData(artists[i].email, key, method - '0');
        printf("Nationality: "); fgets(artists[i].nationality, MAX_LEN, stdin); strtok(artists[i].nationality, "\n");
        printf("Height: "); scanf("%d", &artists[i].height); getchar();
        printf("Weight: "); scanf("%d", &artists[i].weight); getchar();
        printf("Blood Type: "); fgets(artists[i].blood_type, MAX_LEN, stdin); strtok(artists[i].blood_type, "\n");
        printf("Allergies: "); fgets(artists[i].allergies, MAX_LEN, stdin); strtok(artists[i].allergies, "\n");
        encryptData(artists[i].allergies, key, method - '0');
        printf("SNS: "); fgets(artists[i].sns, MAX_LEN, stdin); strtok(artists[i].sns, "\n");
    }

    fp = fopen(fileName, "w");
    for (int i = 0; i < artist_count; i++) {
        fprintf(fp, "%s,%s,%s,%s,%s,%s,%s,%s,%d,%d,%s,%s,%s\n",
                artists[i].name, artists[i].nickname, artists[i].dob, artists[i].gender,
                artists[i].education, artists[i].phone, artists[i].email, artists[i].nationality,
                artists[i].height, artists[i].weight, artists[i].blood_type, artists[i].allergies, artists[i].sns);
    }
    fclose(fp);

    printf("\nAll artist data saved (some fields encrypted).\n");

    printf("\nAvailable Artists:\n");
    for (int i = 0; i < artist_count; i++) {
        printf("%d. %s (%s)\n", i + 1, artists[i].name, artists[i].nickname);
    }

    int sel;
    printf("\nSelect artist index to view details: ");
    scanf("%d", &sel);
    sel--;

    if (sel >= 0 && sel < artist_count) {
        printf("\nEncrypted Data for %s:\n", artists[sel].nickname);
        printf("Name: %s\n", artists[sel].name);
        printf("Nickname: %s\n", artists[sel].nickname);
        printf("Phone: %s\n", artists[sel].phone);
        printf("Email: %s\n", artists[sel].email);
        printf("Allergies: %s\n", artists[sel].allergies);

        char confirm;
        printf("\nDecrypt data? (y/n): ");
        scanf(" %c", &confirm);

        if (confirm == 'y' || confirm == 'Y') {
            char input_key;
            printf("Enter encryption key: ");
            scanf(" %c", &input_key);
            if (input_key == key) {
                decryptData(artists[sel].phone, key, method - '0');
                decryptData(artists[sel].email, key, method - '0');
                decryptData(artists[sel].allergies, key, method - '0');
                printf("\nDecrypted Data:\nPhone: %s\nEmail: %s\nAllergies: %s\n",
                       artists[sel].phone, artists[sel].email, artists[sel].allergies);
            } else {
                printf("Incorrect key. Cannot decrypt.\n");
            }
        }
    } else {
        printf("Invalid selection.\n");
    }
}


// menu.c (example stub to call the function)
#include "stage8.h"
#include <stdio.h>

void menu() {
    int choice;
    while (1) {
        printf("\n[Menu] 1. Data Protection | 0. Exit\n> ");
        scanf("%d", &choice);
        if (choice == 1) protectMyData();
        else if (choice == 0) break;
    }
}


// magrathea.c
extern void menu();

int main() {
    menu();
    return 0;
}
